******************************DAO IMPL***********************************

@Override
	public ArrayList<BookingDetails> viewBookingByHotel(int hotelId) throws HotelBookingException 
	{
		ArrayList<BookingDetails> bookList;
		try
		{
			bookList = new ArrayList<BookingDetails>();
			con=DBUtil.getConn();
			String selectqry="SELECT * from BookingDetails WHERE hotel_id=?";
			pst=con.prepareStatement(selectqry);
			pst.setInt(1,hotelId);
			rs=pst.executeQuery();
			while(rs.next())
			{
				bookList.add(new BookingDetails(rs.getString("booking_id"),
												rs.getString("hotel_id"),
												rs.getString("user_id"),
												rs.getDate("booked_from"),
												rs.getDate("booked_to"),
												rs.getInt("no_of_adults"),
												rs.getInt("no_of_children"),
												rs.getFloat("amount")));
			}
		}
		catch(Exception e)
			{
				e.printStackTrace();
				throw new HotelBookingException("Error");
			}
		finally
		{
			try
			{
				st.close();
				rs.close();
				con.close();
			}
			catch(SQLException e)
			{
				e.printStackTrace();
				throw new HotelBookingException(e.getMessage());
			}
		}
		return bookList;	
	}
	
	@Override
	public ArrayList<BookingDetails> viewGuestListOfHotel(int hotelId)
			throws HotelBookingException {
		ArrayList <BookingDetails> guestList;
		try
		{
			guestList = new ArrayList<BookingDetails>();
			con=DBUtil.getConn();
			LocalDate cdate=LocalDate.now();
			Date date = Date.valueOf(cdate); 
			String selectqry="SELECT * from BookingDetails WHERE hotel_id=? AND ?<=booked_to AND ?>=booked_from";
			pst=con.prepareStatement(selectqry);
			pst.setInt(1,hotelId);
			pst.setDate(2, date);
			pst.setDate(3,date);
			rs=pst.executeQuery();
			while(rs.next())
			{
				guestList.add(new BookingDetails(rs.getString("booking_id"),
						rs.getString("hotel_id"),
						rs.getString("user_id"),
						rs.getDate("booked_from"),
						rs.getDate("booked_to"),
						rs.getInt("no_of_adults"),
						rs.getInt("no_of_children"),
						rs.getFloat("amount")));
			}
		}
		
	     catch(Exception e)
	    {
		  e.printStackTrace();
		  throw new HotelBookingException("Error");
     	}
         finally
        {
 	      try
	    {
		  st.close();
		  rs.close();
		  con.close();
	    }
	     catch(SQLException e)
	    {
		  e.printStackTrace();
		  throw new HotelBookingException(e.getMessage());
	    }
        }
        return guestList;	
       }

	@Override
	public ArrayList<BookingDetails> viewBookingByDate(Date date)
			throws HotelBookingException {
		ArrayList<BookingDetails> bookList;
		try
		{
			bookList = new ArrayList<BookingDetails>();
			con=DBUtil.getConn();
			String selectqry="SELECT * from BookingDetails WHERE booked_from=?";
			pst=con.prepareStatement(selectqry);
			pst.setDate(1,date);
			rs=pst.executeQuery();
			while(rs.next())
			{
				bookList.add(new BookingDetails(rs.getString("booking_id"),
									rs.getString("hotel_id"),
									rs.getString("user_id"),
									rs.getDate("booked_from"),
									rs.getDate("booked_to"),
									rs.getInt("no_of_adults"),
									rs.getInt("no_of_children"),
									rs.getFloat("amount")));
			}
		}
		catch(Exception e)
			{
				e.printStackTrace();
				throw new HotelBookingException("Error");
			}
		finally
		{
			try
			{
				st.close();
				rs.close();
				con.close();
			}
			catch(SQLException e)
			{
				e.printStackTrace();
				throw new HotelBookingException(e.getMessage());
			}
		}
		return bookList;	
    
    
    
    ************************************* MAIN ****************************************
    
   public static void viewBookingByDate() 
	{
		ArrayList<BookingDetails> bookList;
		try 
		{
			hbs=new HotelBookingServiceImpl();
			Date date = null;
			bookList = hbs.viewBookingByDate(date);
			System.out.println("\tBOOKING_ID \tHOTEL_ID \tUSER_ID \tBOOKED_FROM \tBOOKED_TO \tNO_OF_ADULTS \tNO_OF_CHILDREN \tAMOUNT");
			for(BookingDetails b:bookList)
			{
				System.out.println("\t"+b.getBooking_id() +"\t"+b.getHotel_id()+"\t"+b.getUser_id() +"\t"+b.getBooked_from()
								+"\t"+b.getBooked_to()+"\t"+b.getNo_of_adults()+"\t"+b.getNo_of_children()+"\t"+b.getAmount());
			}
		} 
		catch (HotelBookingException e)
		{
			System.out.println(e);
		}	
	}
	
	public static void viewBookingByHotel() 
	{
		int hotelId;
   	    System.out.println("\nEnter Hotel Id: ");
   	    hotelId=sc.nextInt();
		ArrayList<BookingDetails> bookList;
		try 
		{
			hbs=new HotelBookingServiceImpl();
			bookList = hbs.viewBookingByHotel(hotelId);
			System.out.println("\tBOOKING_ID \tHOTEL_ID \tUSER_ID \tBOOKED_FROM \tBOOKED_TO \tNO_OF_ADULTS \tNO_OF_CHILDREN \tAMOUNT");
			for(BookingDetails b:bookList)
			{
				System.out.println("\t"+b.getBooking_id() +"\t"+b.getHotel_id()+"\t"+b.getUser_id() +"\t"+b.getBooked_from()
									+"\t"+b.getBooked_to()+"\t"+b.getNo_of_adults()+"\t"+b.getNo_of_children()+"\t"+b.getAmount());
			}
		} 
		catch (HotelBookingException e)
		{
			System.out.println(e);
		}	
	}
     public static void viewGuestListOfHotel() 
     {
    	 int hotelId;
    	 System.out.println("\nEnter Hotel Id: ");
    	 hotelId=sc.nextInt();
    	 ArrayList<BookingDetails> guestList;
 		try 
 		{
 			hbs=new HotelBookingServiceImpl();
 			guestList = hbs.viewGuestListOfHotel(hotelId);
 			System.out.println("\tBOOKING_ID \tHOTEL_ID \tUSER_ID \tBOOKED_FROM \tBOOKED_TO \tNO_OF_ADULTS \tNO_OF_CHILDREN \tAMOUNT");
 			for(BookingDetails b:guestList)
 			{
 				System.out.println("\t"+b.getBooking_id() +"\t"+b.getHotel_id()+"\t"+b.getUser_id() +"\t"+b.getBooked_from()
 									+"\t"+b.getBooked_to()+"\t"+b.getNo_of_adults()+"\t"+b.getNo_of_children()+"\t"+b.getAmount());
 			}
 		} 
 		catch (HotelBookingException e)
 		{
 			System.out.println(e);
 		}	
	 }